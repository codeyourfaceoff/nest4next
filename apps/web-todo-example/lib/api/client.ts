/**
 * Generated by orval v6.6.0 üç∫
 * Do not edit manually.
 * OpenAPI spec version: 1.0.0
 */
import axios,{
  AxiosRequestConfig,
  AxiosResponse,
  AxiosError
} from 'axios'
import {
  useQuery,
  UseQueryOptions,
  QueryFunction,
  UseQueryResult,
  QueryKey
} from 'react-query'
export interface Todo {
  id: string;
  text: string;
  completed: boolean;
}



// eslint-disable-next-line @typescript-eslint/no-explicit-any
type AsyncReturnType<
T extends (...args: any) => Promise<any>
> = T extends (...args: any) => Promise<infer R> ? R : any;


export const appControllerGet = (
     options?: AxiosRequestConfig
 ): Promise<AxiosResponse<void>> => {
    return axios.get(
      `/api`,options
    );
  }


export const getAppControllerGetQueryKey = () => [`/api`];

    
export const useAppControllerGet = <TData = AsyncReturnType<typeof appControllerGet>, TError = AxiosError<unknown>>(
  options?: { query?:UseQueryOptions<AsyncReturnType<typeof appControllerGet>, TError, TData>, axios?: AxiosRequestConfig}

  ):  UseQueryResult<TData, TError> & { queryKey: QueryKey } => {

  const {query: queryOptions, axios: axiosOptions} = options || {}

  const queryKey = queryOptions?.queryKey ?? getAppControllerGetQueryKey();

  

  const queryFn: QueryFunction<AsyncReturnType<typeof appControllerGet>> = () => appControllerGet(axiosOptions);

  const query = useQuery<AsyncReturnType<typeof appControllerGet>, TError, TData>(queryKey, queryFn, queryOptions)

  return {
    queryKey,
    ...query
  }
}


/**
 * @summary List all todos
 */
export const todosControllerList = (
     options?: AxiosRequestConfig
 ): Promise<AxiosResponse<Todo[]>> => {
    return axios.get(
      `/api/todos`,options
    );
  }


export const getTodosControllerListQueryKey = () => [`/api/todos`];

    
export const useTodosControllerList = <TData = AsyncReturnType<typeof todosControllerList>, TError = AxiosError<unknown>>(
  options?: { query?:UseQueryOptions<AsyncReturnType<typeof todosControllerList>, TError, TData>, axios?: AxiosRequestConfig}

  ):  UseQueryResult<TData, TError> & { queryKey: QueryKey } => {

  const {query: queryOptions, axios: axiosOptions} = options || {}

  const queryKey = queryOptions?.queryKey ?? getTodosControllerListQueryKey();

  

  const queryFn: QueryFunction<AsyncReturnType<typeof todosControllerList>> = () => todosControllerList(axiosOptions);

  const query = useQuery<AsyncReturnType<typeof todosControllerList>, TError, TData>(queryKey, queryFn, queryOptions)

  return {
    queryKey,
    ...query
  }
}


